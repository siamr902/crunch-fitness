generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  workouts      Workout[]

  @@unique([id, email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workout {
  id         String     @id @default(uuid())
  name       String
  rating     Int
  finishedAt DateTime   @default(now())
  user       User?      @relation(fields: [userId, userEmail], references: [id, email])
  userId     String?
  userEmail  String?
  exercises  Exercise[]

  @@index([rating])
}

model Exercise {
  id        String  @id @default(cuid())
  name      String  @db.VarChar(255)
  sets      Int
  reps      Int
  weight    Int
  workout   Workout @relation(fields: [workoutId], references: [id])
  workoutId String
}
